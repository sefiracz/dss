/**
 * DSS - Digital Signature Services
 * Copyright (C) 2015 European Commission, provided under the CEF programme
 * 
 * This file is part of the "DSS - Digital Signature Services" project.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package eu.europa.esig.dss.validation;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;

import org.junit.jupiter.api.Test;

import eu.europa.esig.dss.enumerations.TimestampLocation;
import eu.europa.esig.dss.enumerations.TimestampType;
import eu.europa.esig.dss.enumerations.TimestampedObjectType;
import eu.europa.esig.dss.utils.Utils;
import eu.europa.esig.dss.validation.timestamp.TimestampToken;
import eu.europa.esig.dss.validation.timestamp.TimestampTokenComparator;
import eu.europa.esig.dss.validation.timestamp.TimestampedReference;

public class TimestampTokenComparatorTest {

	@Test
	public void test() throws Exception {

		TimestampTokenComparator comparator = new TimestampTokenComparator();

		String firstBinaries = "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";
		TimestampToken firstTimestampToken = new TimestampToken(Utils.fromBase64(firstBinaries), TimestampType.SIGNATURE_TIMESTAMP);
		TimestampToken firstTimestampTokenDuplicate = new TimestampToken(Utils.fromBase64(firstBinaries), TimestampType.SIGNATURE_TIMESTAMP);

		assertEquals(0, comparator.compare(firstTimestampToken, firstTimestampTokenDuplicate));
		assertEquals(0, comparator.compare(firstTimestampTokenDuplicate, firstTimestampToken));

		firstTimestampTokenDuplicate = new TimestampToken(Utils.fromBase64(firstBinaries), TimestampType.CONTENT_TIMESTAMP);

		assertEquals(1, comparator.compare(firstTimestampToken, firstTimestampTokenDuplicate));
		assertEquals(-1, comparator.compare(firstTimestampTokenDuplicate, firstTimestampToken));

		firstTimestampTokenDuplicate = new TimestampToken(Utils.fromBase64(firstBinaries), TimestampType.ARCHIVE_TIMESTAMP);

		assertEquals(-1, comparator.compare(firstTimestampToken, firstTimestampTokenDuplicate));
		assertEquals(1, comparator.compare(firstTimestampTokenDuplicate, firstTimestampToken));

		firstTimestampTokenDuplicate = new TimestampToken(Utils.fromBase64(firstBinaries),
				TimestampType.SIGNATURE_TIMESTAMP,
				Arrays.asList(new TimestampedReference("", TimestampedObjectType.TIMESTAMP)), TimestampLocation.DOC_TIMESTAMP);

		assertEquals(-1, comparator.compare(firstTimestampToken, firstTimestampTokenDuplicate));
		assertEquals(1, comparator.compare(firstTimestampTokenDuplicate, firstTimestampToken));

		String secondBinaries = "MIIKrAYJKoZIhvcNAQcCoIIKnTCCCpkCAQMxCzAJBgUrDgMCGgUAMIIBAQYLKoZIhvcNAQkQAQSggfEEge4wgesCAQEGESsGAQQBgpNkAgEDAgBph2gAMDEwDQYJYIZIAWUDBAIBBQAEIBPAXpM+S3CdBWOF2YVmw5+rMylRg1O12+Gg82M/bPHoAggQkklN9uHFkBgPMjAxOTA2MTgyMTUzMDRaMASAAgH0Agh+EYn6LcLg0qB1pHMwcTELMAkGA1UEBhMCUEUxPDA6BgNVBAoMM1JlZ2lzdHJvIE5hY2lvbmFsIGRlIElkZW50aWZpY2FjacOzbiB5IEVzdGFkbyBDaXZpbDEkMCIGA1UEAwwbUFNWQS1UU0EtUkVOSUVDIFRTVS0yMDE5LTAyoIIGpTCCBqEwggSJoAMCAQICCHrTgqximB3TMA0GCSqGSIb3DQEBCwUAMGMxCzAJBgNVBAYTAlBFMUIwQAYDVQQKDDlFbnRpZGFkIGRlIENlcnRpZmljYWNpw7NuIE5hY2lvbmFsIHBhcmEgZWwgRXN0YWRvIFBlcnVhbm8xEDAOBgNVBAMMB0VDLVBTVkEwHhcNMTkwMTI4MjAzNTIxWhcNMzEwMTI4MjAzNTIxWjBxMQswCQYDVQQGEwJQRTE8MDoGA1UECgwzUmVnaXN0cm8gTmFjaW9uYWwgZGUgSWRlbnRpZmljYWNpw7NuIHkgRXN0YWRvIENpdmlsMSQwIgYDVQQDDBtQU1ZBLVRTQS1SRU5JRUMgVFNVLTIwMTktMDIwggEoMA0GCSqGSIb3DQEBAQUAA4IBFQAwggEQAoIBAQCVUXmV37/LV4Ee620sQtK2U2SHxxPN/gFQ7LOvxjLrGgjzVpVk1ga/BSy0zm7//rdmSz7QxXGAVOo1ioFaIPdANSUzh6nP0vRTxj3nmI75SsfdhMxP6dPlUs41jgL09qnh1lnP6ON3xWxlG8lZF3X+ckCFdZUh7JygM1FMkaV60m3HWofocsestBgvXEdz39BBH3YUAeySbtgKnmS9ctM4SRqbdsHr7UGTpUScOX2+Nc/Csd7vzAmP5HmQ6dk8aYitDQYMJK8oXJ0koIdW85+//fmur2acZPZ2rPogbtu4LyRaNACeUMw7gntVY1//RGAT4yM827amPqHHXnA0Bh5/AgkBAAAAAAAAAAGjggJDMIICPzAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFN5n/QA5NoyFozDutbrX26MOq+ZrMEgGCCsGAQUFBwEBBDwwOjA4BggrBgEFBQcwAoYsaHR0cDovL3d3dy5yZW5pZWMuZ29iLnBlL2NydC9zaGEyL2VjcHN2YS5jcnQwggEKBgNVHSAEggEBMIH+MIGcBhErBgEEAYKTZAIBAwEAZYdoADCBhjAyBggrBgEFBQcCARYmaHR0cHM6Ly9wa2kucmVuaWVjLmdvYi5wZS9yZXBvc2l0b3Jpby8wUAYIKwYBBQUHAgIwRB5CAFAAbwBsAO0AdABpAGMAYQAgAEcAZQBuAGUAcgBhAGwAIABkAGUAIABDAGUAcgB0AGkAZgBpAGMAYQBjAGkA8wBuMF0GBQQAj2cBMFQwUgYIKwYBBQUHAgIwRh5EAEUAVABTAEkAIABiAGEAcwBlAGwAaQBuAGUAIAB0AGkAbQBlACAAcwB0AGEAbQBwAGkAbgBnACAAcABvAGwAaQBjAHkwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwcgYDVR0fBGswaTAyoDCgLoYsaHR0cDovL2NybC5yZW5pZWMuZ29iLnBlL2FybC9zaGEyL2VjcHN2YS5jcmwwM6AxoC+GLWh0dHA6Ly9jcmwyLnJlbmllYy5nb2IucGUvYXJsL3NoYTIvZWNwc3ZhLmNybDAdBgNVHQ4EFgQUFKeA5dSufG9vAlUhFx2iYz0cxBgwCwYDVR0PBAQDAgbAMA0GCSqGSIb3DQEBCwUAA4ICAQB2LGEl495ldToP71z5hVgT1WqbNN36rMab8P1Sj0C11Per7df8YSdWPHteatQkqLoVujtLno/0PyvTRaxb9fKf3hgK3Semmd6P7/EwFu2WHdZKwLKVNnKlMYi5NI5oJxNmAExxC3Vqv4n6/vvo9q3fL5QzUMYuv9pmuLW7O8T1gwNqKZR2jzd28wV4tb9d5hsUMbAa6YsA6GFELiaYca2sJQ2YNUk2ESueHQ/YKZawOQ2JlAp5sbJWHjx1vB8r8b1TcEWxOvlwdZTlGL8RoJW1DKKi71yEe964ZtOgGeGX7al5rpdUTkP6tDpz9o8ymdl0xo5GNYee0O51j7DkTgTwVJcbSxTT8JkmOzsoG39alLo3jmAQFSVkRAP1n3XBdXthcKTZ/L3ZMsxP0B+BkqTsFljIdsuY2rjyjORv7x+XvG4pQVwYOAh+cOtqsBJlcOmkcYKzC4IuANDjG1bnWFy/pomuVsaAId2mTvCHxfUSsuJH1ea/0qwOg+MH9biBzNSwSDhojFXRbq5c8InhLx0+CIREg0sOGGOTeiQfIS83SejJaAPGBPy13ge8v/V4VxMg71Cfavcm92kWJZs3muz3AJ2pEA6OVhjpuZi+f5wohCOyadxI2nM25NEb28kPjgLS1F0oYgEX09y3DymYvss7FLlI7ih7qZKZ3eY6RZ3pEDGCAtcwggLTAgEBMG8wYzELMAkGA1UEBhMCUEUxQjBABgNVBAoMOUVudGlkYWQgZGUgQ2VydGlmaWNhY2nDs24gTmFjaW9uYWwgcGFyYSBlbCBFc3RhZG8gUGVydWFubzEQMA4GA1UEAwwHRUMtUFNWQQIIetOCrGKYHdMwCQYFKw4DAhoFAKCCAT0wGgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJEAEEMBwGCSqGSIb3DQEJBTEPFw0xOTA2MTgyMTUzMDRaMCMGCSqGSIb3DQEJBDEWBBRi4CBLZlEJ9K2EoA4Hy4QEUmjzmzApBgkqhkiG9w0BCTQxHDAaMAkGBSsOAwIaBQChDQYJKoZIhvcNAQEBBQAwgbAGCyqGSIb3DQEJEAIvMYGgMIGdMIGaMIGXBCA8jvR/Fajf3RJp1Ujrq9wnBFTjl5OMZER4SRiVMvZIGzBzMGekZTBjMQswCQYDVQQGEwJQRTFCMEAGA1UECgw5RW50aWRhZCBkZSBDZXJ0aWZpY2FjacOzbiBOYWNpb25hbCBwYXJhIGVsIEVzdGFkbyBQZXJ1YW5vMRAwDgYDVQQDDAdFQy1QU1ZBAgh604KsYpgd0zANBgkqhkiG9w0BAQEFAASCAQAcsYEm1mIUlUkq+B6t4HEJf2CDh05H4WdlIcbH+8wZc/mh/OVvO3YkJfsqxOBbudykJowEoM/VIrp5mPis+I6fMUTxyh3XHkCbq3GZTGBI/VW67VlEhdZCHDPsefXmicRf6o4E7uXNKW9RpWDuJd4ZI6nQRTdjtmweoS/w0NLz5jHupLBa0RELhHoHbsO/OwnQxwDpuj/NAT1wj+xURYSj6/wKPyM0AfpOL/H/RDOVtp8I4x1RuAx6Zann4++XQLHQ+JuEaFEJ9kDE0nlaxIXhtg0JU19CPzwAC7RvIPnrl/H8ShyY7ODWo/SzP40dn9Twn7Fs42w3n8skoLMXqLbz";
		TimestampToken secondTimestampToken = new TimestampToken(Utils.fromBase64(secondBinaries), TimestampType.SIGNATURE_TIMESTAMP);

		assertEquals(-1, comparator.compare(firstTimestampToken, secondTimestampToken));
		assertEquals(1, comparator.compare(secondTimestampToken, firstTimestampToken));

		secondTimestampToken = new TimestampToken(Utils.fromBase64(secondBinaries), TimestampType.CONTENT_TIMESTAMP);

		assertEquals(-1, comparator.compare(firstTimestampToken, secondTimestampToken));
		assertEquals(1, comparator.compare(secondTimestampToken, firstTimestampToken));

		secondTimestampToken = new TimestampToken(Utils.fromBase64(secondBinaries),
				TimestampType.SIGNATURE_TIMESTAMP,
				Arrays.asList(new TimestampedReference("", TimestampedObjectType.TIMESTAMP)), TimestampLocation.DOC_TIMESTAMP);

		assertEquals(-1, comparator.compare(firstTimestampToken, secondTimestampToken));
		assertEquals(1, comparator.compare(secondTimestampToken, firstTimestampToken));

	}

}
